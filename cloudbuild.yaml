# Cloud Build configuration for HSS Backend (SAFE VERSION)
# Triggers: develop branch (dev), v* tags (prod)
# FIX: SERVICE_NAME artƒ±k _SERVICE_NAME olarak substitution; t√ºm bash deƒüi≈ükenleri MY_ prefix ile korunuyor.

steps:
  # 1. Maven dependencies download (optimized caching)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'maven-deps'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üì¶ Maven dependencies indiriliyor..."
        echo "Mevcut dizin: $(pwd)"
        echo "Dizin i√ßeriƒüi: $(ls -la)"
        # Root dizinden hss-backend'e ge√ß veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine ge√ßildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalƒ±yoruz"
        else
          echo "‚ùå hss-backend dizini veya pom.xml bulunamadƒ±!"
          echo "Mevcut dizin i√ßeriƒüi:"
          ls -la
          exit 1
        fi
        
        # Maven cache'ini optimize et
        mkdir -p /workspace/.m2/repository
        export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=256m"
        
        # Dependencies'leri indir ve cache'le
        ./mvnw -B dependency:go-offline \
          -Dmaven.repo.local=/workspace/.m2/repository \
          -Dmaven.test.skip=true \
          -Dmaven.javadoc.skip=true \
          -Dmaven.source.skip=true
        
        # Cache'i koru
        echo "‚úÖ Dependencies hazƒ±r ve cache'lenmi≈ü!"

  # 2. Test a≈üamasƒ± (parallel with build)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Backend testleri √ßalƒ±≈ütƒ±rƒ±lƒ±yor..."
        echo "Mevcut dizin: $(pwd)"
        # Root dizinden hss-backend'e ge√ß veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine ge√ßildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalƒ±yoruz"
        else
          echo "‚ùå hss-backend dizini veya pom.xml bulunamadƒ±!"
          echo "Mevcut dizin i√ßeriƒüi:"
          ls -la
          exit 1
        fi
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "üîç Production testleri - t√ºm testler..."
          ./mvnw -B test -Dmaven.repo.local=/workspace/.m2/repository
        else
          echo "‚ö° Development testleri..."
          ./mvnw -B test -Dtest=!*IntegrationTest -Dmaven.test.failure.ignore=true -Dmaven.repo.local=/workspace/.m2/repository
        fi
        echo "‚úÖ Testler ba≈üarƒ±lƒ±!"
    waitFor: ['maven-deps']

  # 3. Build a≈üamasƒ± (parallel with test)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üî® Backend build ediliyor..."
        echo "Mevcut dizin: $(pwd)"
        # Root dizinden hss-backend'e ge√ß veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine ge√ßildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalƒ±yoruz"
        else
          echo "‚ùå hss-backend dizini veya pom.xml bulunamadƒ±!"
          echo "Mevcut dizin i√ßeriƒüi:"
          ls -la
          exit 1
        fi
        ./mvnw -B clean package -DskipTests -Dmaven.repo.local=/workspace/.m2/repository
        echo "‚úÖ Build ba≈üarƒ±lƒ±!"
    waitFor: ['maven-deps']

  # 4. Docker build (optimized caching)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        MY_IMG_PATH="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend"

        echo "üê≥ Docker image build ba≈ülƒ±yor..."
        echo "Environment: ${_ENVIRONMENT}, Tag: ${_TAG_NAME}"
        echo "Mevcut dizin: $(pwd)"
        echo "Dizin i√ßeriƒüi: $(ls -la)"

        # Root dizinden hss-backend'e ge√ß veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine ge√ßildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalƒ±yoruz"
        else
          echo "‚ùå hss-backend dizini veya pom.xml bulunamadƒ±!"
          echo "Mevcut dizin i√ßeriƒüi:"
          ls -la
          exit 1
        fi

        # Multiple cache sources for better hit rate
        docker pull "$${MY_IMG_PATH}:latest" || echo "No latest image found"
        docker pull "$${MY_IMG_PATH}:${_TAG_NAME}" || echo "No tagged image found"

        # Build with optimized cache strategy
        docker build \
          --tag "$${MY_IMG_PATH}:${SHORT_SHA}" \
          --tag "$${MY_IMG_PATH}:${_TAG_NAME}" \
          --tag "$${MY_IMG_PATH}:latest" \
          --cache-from "$${MY_IMG_PATH}:latest" \
          --cache-from "$${MY_IMG_PATH}:${_TAG_NAME}" \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg VCS_REF=${SHORT_SHA} \
          --build-arg ENVIRONMENT=${_ENVIRONMENT} \
          --progress=plain \
          .

        echo "‚úÖ Docker build ba≈üarƒ±lƒ±!"
    waitFor: ['test', 'build']

  # 5. Docker push
  - name: 'gcr.io/cloud-builders/docker'
    id: 'docker-push'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        MY_IMG_PATH="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend"
        echo "üì§ Docker image push ba≈ülƒ±yor..."
        docker push "$${MY_IMG_PATH}:${SHORT_SHA}"
        docker push "$${MY_IMG_PATH}:${_TAG_NAME}"
        docker push "$${MY_IMG_PATH}:latest"
        echo "‚úÖ Docker push tamamlandƒ±!"
    waitFor: ['docker-build']

  # 6. Database Migration (sadece prod i√ßin)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'migrate'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "üóÑÔ∏è Production database migration ba≈ülƒ±yor..."
          echo "Mevcut dizin: $(pwd)"
          
          # Root dizinden hss-backend'e ge√ß veya mevcut dizinde kal
          if [ -d "hss-backend" ]; then
            cd hss-backend
            echo "hss-backend dizinine ge√ßildi"
          elif [ -f "pom.xml" ]; then
            echo "Mevcut dizinde pom.xml bulundu, burada kalƒ±yoruz"
          else
            echo "‚ùå hss-backend dizini veya pom.xml bulunamadƒ±!"
            exit 1
          fi
          
          # Flyway migration √ßalƒ±≈ütƒ±r
          echo "üìä Flyway migration √ßalƒ±≈ütƒ±rƒ±lƒ±yor..."
          ./mvnw -B flyway:migrate \
            -Dflyway.url=jdbc:postgresql:///hss_prod?socketFactory=com.google.cloud.sql.postgres.SocketFactory&cloudSqlInstance=${_CONNECTION_NAME} \
            -Dflyway.user=${_DB_USERNAME_SECRET} \
            -Dflyway.password=${_DB_PASSWORD_SECRET} \
            -Dflyway.locations=classpath:db/migration \
            -Dflyway.baseline-on-migrate=true
          
          echo "‚úÖ Database migration tamamlandƒ±!"
        else
          echo "‚ÑπÔ∏è Dev ortamƒ± - migration atlandƒ±"
        fi
    waitFor: ['migrate']

  # 7. Cloud Run deploy
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail

        echo "üöÄ Cloud Run deploy ba≈ülƒ±yor..."
        echo "Environment: ${_ENVIRONMENT}"

        if [ "${_ENVIRONMENT}" = "prod" ]; then
          MY_SPRING_PROFILE="prod"
          MY_SERVICE_NAME="hss-backend"
          MY_MIN_INSTANCES="1"
          MY_MAX_INSTANCES="10"
          MY_MEMORY="2Gi"  # Daha fazla memory
          MY_CPU="2"
          MY_TIMEOUT="900"  # Daha uzun timeout (15 dakika)
          MY_CONCURRENCY="100"
          MY_DB="hss_prod"
          MY_PORT="8080"
        else
          MY_SPRING_PROFILE="dev"
          MY_SERVICE_NAME="hss-backend-dev"
          MY_MIN_INSTANCES="0"
          MY_MAX_INSTANCES="3"
          MY_MEMORY="512Mi"
          MY_CPU="1"
          MY_TIMEOUT="300"
          MY_CONCURRENCY="80"
          MY_DB="hss_dev"
          MY_PORT="8080"
        fi

        # Servisin mevcut olup olmadƒ±ƒüƒ±nƒ± kontrol et
        echo "üîç Servis durumu kontrol ediliyor: $${MY_SERVICE_NAME}"
        if gcloud run services describe "$${MY_SERVICE_NAME}" --region="${_REGION}" --project="${PROJECT_ID}" --quiet >/dev/null 2>&1; then
          echo "‚úÖ Servis mevcut, g√ºncelleniyor..."
          MY_NO_TRAFFIC_FLAG="--no-traffic"
        else
          echo "üÜï Servis mevcut deƒüil, olu≈üturuluyor..."
          MY_NO_TRAFFIC_FLAG=""
        fi

        gcloud run deploy "$${MY_SERVICE_NAME}" \
          --image="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}" \
          --region="${_REGION}" \
          --service-account="${_SERVICE_ACCOUNT}" \
          --platform=managed \
          --no-allow-unauthenticated \
          --set-env-vars="SPRING_PROFILES_ACTIVE=$${MY_SPRING_PROFILE},DB_NAME=$${MY_DB}" \
          --set-env-vars="GCP_SQL_INSTANCE_CONNECTION_NAME=${_CONNECTION_NAME}" \
          --set-secrets="DB_USERNAME=${_DB_USERNAME_SECRET}:latest,DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest" \
          --add-cloudsql-instances="${_CONNECTION_NAME}" \
          --min-instances="$${MY_MIN_INSTANCES}" \
          --max-instances="$${MY_MAX_INSTANCES}" \
          --memory="$${MY_MEMORY}" \
          --cpu="$${MY_CPU}" \
          --timeout="$${MY_TIMEOUT}" \
          --concurrency="$${MY_CONCURRENCY}" \
          --port="$${MY_PORT}" \
          --cpu-throttling \
          --execution-environment=gen2 \
          $${MY_NO_TRAFFIC_FLAG} \
          --quiet

        # IAM policy'yi ayrƒ± olarak ayarla
        echo "üîê IAM policy ayarlanƒ±yor..."
        gcloud run services add-iam-policy-binding "$${MY_SERVICE_NAME}" \
          --region="${_REGION}" \
          --member="allUsers" \
          --role="roles/run.invoker" \
          --quiet || echo "‚ö†Ô∏è IAM policy ayarlanamadƒ±, manuel olarak ayarlanmalƒ±"

        MY_URL=$(gcloud run services describe "$${MY_SERVICE_NAME}" --region=${_REGION} --format='value(status.url)')
        echo "‚úÖ Deploy ba≈üarƒ±lƒ±: $${MY_SERVICE_NAME}"
        echo "üåê URL: $${MY_URL}"

        # Optimized health check with retry logic
        echo "üîç Health check ba≈ülƒ±yor..."
        for i in {1..5}; do
          if curl -sf "$${MY_URL}/actuator/health" >/dev/null 2>&1; then
            echo "‚úÖ Servis saƒülƒ±klƒ±! (deneme $i/5)"
            break
          else
            echo "‚è≥ Servis ba≈ülƒ±yor... (deneme $i/5)"
            sleep 10
          fi
        done

  # 7. Release artifacts (only prod)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'release'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "üì¶ Release artifacts olu≈üturuluyor..."
          MY_IMG_PATH="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}"
          MY_VERSION="${_TAG_NAME}"
          MY_BUCKET="gs://hss-releases-${PROJECT_ID}"

          cat > manifest.json << EOF
        {
          "version": "$${MY_VERSION}",
          "environment": "production",
          "image": "$${MY_IMG_PATH}",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
          gsutil -m cp manifest.json "$${MY_BUCKET}/releases/$${MY_VERSION}/"
          gsutil -m cp manifest.json "$${MY_BUCKET}/releases/latest/manifest.json"
          echo "‚úÖ Release artifacts y√ºklendi!"
        else
          echo "‚ÑπÔ∏è Dev ortamƒ± - release atlandƒ±"
        fi

  # 8. Monitoring metrics (parallel with release)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'monitoring'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üìä Monitoring kaydƒ± g√∂nderiliyor..."
        gcloud logging write hss-deployment \
          "Backend deployment completed successfully" \
          --severity=INFO \
          --payload-type=json \
          --payload='{
            "service": "hss-backend",
            "environment": "${_ENVIRONMENT}",
            "version": "${_TAG_NAME}",
            "commit_sha": "${SHORT_SHA}",
            "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }' || echo "‚ö†Ô∏è Monitoring g√∂nderilemedi"
    waitFor: ['deploy']

# Substitution variables
substitutions:
  _REGION: 'europe-west3'
  _REPO_NAME: 'hss-backend'
  _SERVICE_ACCOUNT: 'hss-backend-sa@hss-cloud-473511.iam.gserviceaccount.com'
  _CONNECTION_NAME: 'hss-cloud-473511:europe-west3:hss-sql'
  _DB_USERNAME_SECRET: 'DB_USERNAME'
  _DB_PASSWORD_SECRET: 'DB_PASSWORD'
  _ENVIRONMENT: 'dev'
  _TAG_NAME: 'dev'

# Options (optimized for performance)
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # 8 vCPU, 8GB RAM - optimal for Maven + Docker
  diskSizeGb: 100  # Increased for better caching
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'MAVEN_OPTS=-Xmx2048m -XX:MaxPermSize=512m'  # Optimized Maven memory
    - 'GRADLE_OPTS=-Xmx2048m -XX:MaxPermSize=512m'

timeout: '1200s'  # Increased timeout for complex builds

images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest'