# Cloud Build configuration for HSS Backend
# Triggers: develop branch (dev), v* tags (prod)
# Optimized for both dev and prod environments

steps:
  # 1. Maven dependencies download (cache için)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "📦 Maven dependencies indiriliyor..."
        echo "Mevcut dizin: $(pwd)"
        echo "Dizin içeriği: $(ls -la)"
        # Root dizinden hss-backend'e geç veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine geçildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalıyoruz"
        else
          echo "❌ hss-backend dizini veya pom.xml bulunamadı!"
          echo "Mevcut dizin içeriği:"
          ls -la
          exit 1
        fi
        ./mvnw -B dependency:go-offline -Dmaven.repo.local=/workspace/.m2/repository
        echo "✅ Dependencies hazır!"

  # 2. Test aşaması (environment-aware)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🧪 Backend testleri çalıştırılıyor..."
        echo "Mevcut dizin: $(pwd)"
        # Root dizinden hss-backend'e geç veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine geçildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalıyoruz"
        else
          echo "❌ hss-backend dizini veya pom.xml bulunamadı!"
          echo "Mevcut dizin içeriği:"
          ls -la
          exit 1
        fi
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "🔍 Production testleri - tüm testler çalıştırılıyor..."
          ./mvnw -B test -Dmaven.repo.local=/workspace/.m2/repository
        else
          echo "⚡ Development testleri - hızlı testler..."
          ./mvnw -B test -Dtest=!*IntegrationTest -Dmaven.test.failure.ignore=true -Dmaven.repo.local=/workspace/.m2/repository
        fi
        echo "✅ Testler başarılı!"
    waitFor: ['-']  # Parallel with build

  # 3. Build aşaması (parallel with test)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔨 Backend build ediliyor..."
        echo "Mevcut dizin: $(pwd)"
        # Root dizinden hss-backend'e geç veya mevcut dizinde kal
        if [ -d "hss-backend" ]; then
          cd hss-backend
          echo "hss-backend dizinine geçildi"
        elif [ -f "pom.xml" ]; then
          echo "Mevcut dizinde pom.xml bulundu, burada kalıyoruz"
        else
          echo "❌ hss-backend dizini veya pom.xml bulunamadı!"
          echo "Mevcut dizin içeriği:"
          ls -la
          exit 1
        fi
        ./mvnw -B clean package -DskipTests -Dmaven.repo.local=/workspace/.m2/repository
        echo "✅ Build başarılı!"
    waitFor: ['-']  # Parallel with test

  # 4. Docker image build (optimized with cache)
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🐳 Docker image build başlıyor..."
        echo "Environment: ${_ENVIRONMENT}"
        echo "Tag: ${_TAG_NAME}"
        
        # Cache from previous builds
        docker pull ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest || echo "No previous image found"
        
        # Build with cache
        docker build \
          --tag ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA} \
          --tag ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME} \
          --tag ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest \
          --cache-from ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg VCS_REF=${SHORT_SHA} \
          --build-arg ENVIRONMENT=${_ENVIRONMENT} \
          hss-backend
        
        echo "✅ Docker build başarılı!"

  # 5. Docker image push (parallel)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'
    waitFor: ['-']  # Parallel execution

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'
    waitFor: ['-']  # Parallel execution

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest'
    waitFor: ['-']  # Parallel execution

  # 6. Cloud Run deploy (environment-aware)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Cloud Run'a deploy ediliyor..."
        echo "Environment: ${_ENVIRONMENT}"
        
        # Environment'a göre konfigürasyon belirle
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          SERVICE_NAME="hss-backend"
          SPRING_PROFILE="prod"
          MIN_INSTANCES="1"
          MAX_INSTANCES="10"
          MEMORY="1Gi"
          CPU="2"
          TIMEOUT="600"
          CONCURRENCY="100"
          DB_NAME="hss_prod"
          echo "🏭 Production deployment konfigürasyonu"
        else
          SERVICE_NAME="hss-backend-dev"
          SPRING_PROFILE="dev"
          MIN_INSTANCES="0"
          MAX_INSTANCES="3"
          MEMORY="512Mi"
          CPU="1"
          TIMEOUT="300"
          CONCURRENCY="80"
          DB_NAME="hss_dev"
          echo "🧪 Development deployment konfigürasyonu"
        fi
        
        # Cloud Run deploy
        gcloud run deploy $SERVICE_NAME \
          --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA} \
          --region=${_REGION} \
          --service-account=${_SERVICE_ACCOUNT} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars=SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \
          --set-env-vars=GCP_SQL_INSTANCE_CONNECTION_NAME=${_CONNECTION_NAME} \
          --set-env-vars=DB_NAME=$DB_NAME \
          --set-secrets=DB_USERNAME=${_DB_USERNAME_SECRET}:latest,DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest \
          --add-cloudsql-instances=${_CONNECTION_NAME} \
          --min-instances=$MIN_INSTANCES \
          --max-instances=$MAX_INSTANCES \
          --port=8080 \
          --memory=$MEMORY \
          --cpu=$CPU \
          --timeout=$TIMEOUT \
          --concurrency=$CONCURRENCY \
          --no-traffic \
          --quiet
        
        # Service URL'i al
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${_REGION} --format='value(status.url)')
        echo "✅ Cloud Run deploy başarılı: $SERVICE_NAME"
        echo "🌐 Service URL: $SERVICE_URL"
        
        # Health check
        echo "🔍 Health check yapılıyor..."
        sleep 30
        if curl -sf "$SERVICE_URL/actuator/health" > /dev/null 2>&1; then
          echo "✅ Health check başarılı!"
        else
          echo "⚠️  Health check başarısız - service başlıyor olabilir"
        fi

  # 7. Release artifacts oluştur (sadece prod için)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "prod" ]; then
          echo "📦 Production release artifacts oluşturuluyor..."
          
          # Release klasörü oluştur
          VERSION=${_TAG_NAME}
          BUCKET=gs://hss-releases-${PROJECT_ID}
          
          # Backend image referansı
          echo "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}" > backend-image.txt
          
          # Manifest oluştur
          cat > manifest.json << EOF
        {
          "version": "$VERSION",
          "environment": "production",
          "changes": ["Backend production deployment"],
          "artifacts": {
            "backend": {
              "image": "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}",
              "tag": "${_TAG_NAME}",
              "digest": "$(docker inspect --format='{{index .RepoDigests 0}}' ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA} | cut -d'@' -f2)"
            },
            "frontend": "https://storage.googleapis.com/hss-releases-${PROJECT_ID}/releases/$VERSION/frontend/"
          },
          "deployment": {
            "region": "${_REGION}",
            "service_name": "hss-backend",
            "min_instances": 1,
            "max_instances": 10,
            "memory": "1Gi",
            "cpu": "2"
          },
          "forced": false,
          "channel": "prod",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "cloud-build"
        }
        EOF
          
          # Cloud Storage'a yükle
          gsutil -m cp backend-image.txt $BUCKET/releases/$VERSION/
          gsutil -m cp manifest.json $BUCKET/releases/$VERSION/
          
          # Latest pointer'ını güncelle
          gsutil -m cp manifest.json $BUCKET/releases/latest/manifest.json
          
          echo "✅ Production release artifacts oluşturuldu!"
          echo "📋 Release URL: https://storage.googleapis.com/hss-releases-${PROJECT_ID}/releases/$VERSION/"
        else
          echo "ℹ️  Development deployment - release artifacts oluşturulmadı"
        fi

  # 8. Monitoring metrics gönder (opsiyonel)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "📊 Monitoring metrics gönderiliyor..."
        
        # Custom metric gönder (--resource=global kaldırıldı)
        gcloud logging write hss-deployment \
          "Backend deployment completed successfully" \
          --severity=INFO \
          --payload-type=json \
          --payload='{
            "service": "hss-backend",
            "environment": "${_ENVIRONMENT}",
            "version": "${_TAG_NAME}",
            "commit_sha": "${SHORT_SHA}",
            "deployment_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }' || echo "⚠️  Monitoring metrics gönderilemedi (opsiyonel)"
        
        echo "✅ Monitoring metrics gönderildi!"

# Substitution variables
substitutions:
  _REGION: 'europe-west3'
  _REPO_NAME: 'hss-backend'
  _SERVICE_ACCOUNT: 'hss-backend-sa@hss-cloud-473511.iam.gserviceaccount.com'
  _CONNECTION_NAME: 'hss-cloud-473511:europe-west3:hss-sql'
  _DB_USERNAME_SECRET: 'DB_USERNAME'
  _DB_PASSWORD_SECRET: 'DB_PASSWORD'
  _ENVIRONMENT: 'dev'  # Bu değer trigger'da override edilecek

# Build options (optimized)
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 50
  substitution_option: 'ALLOW_LOOSE'
  env:
    - 'DOCKER_BUILDKIT=1'

# Timeout (optimized)
timeout: '600s'

# Images to be pushed to registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:${_TAG_NAME}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/hss-backend:latest'